const shell = require('shelljs');
const fs = require('fs');
const chalk = require('chalk');
const GraphQLGenerator = require('@domain-schema/graphql').default;
const { pascalize } = require('humps');

const { getModulePackageName, computeModulePath } = require('../helpers/util');
const schemas = require('../../../modules/core/common/generatedSchemas');

/**
 * Update module schema.
 *
 * @param logger - The Logger.
 * @param moduleName - The name of a new module.
 * @param packageName - The location for a new module [client|server|both].
 */
function updateModule({ logger, packageName, moduleName, old }) {
  if (packageName === 'server') {
    logger.info(`Updating ${moduleName} Schema…`);

    // pascalize
    const Module = pascalize(moduleName);
    const modulePackageName = getModulePackageName(packageName, old);
    const destinationPath = computeModulePath(modulePackageName, old, moduleName);

    if (fs.existsSync(destinationPath)) {
      // get module schema
      const schema = schemas.default[`${Module}Schema`];

      // schema file
      const file = `schema.graphql`;

      shell.cd(destinationPath);
      // override Module type in schema.graphql file
      const replaceType = `### schema type definitions([^()]+)### end schema type definitions`;
      shell
        .ShellString(
          shell
            .cat(file)
            .replace(
              RegExp(replaceType, 'g'),
              `### schema type definitions autogenerated\n${new GraphQLGenerator().generateTypes(
                schema
              )}\n### end schema type definitions`
            )
        )
        .to(file);

      logger.info(chalk.green(`✔ Schema in ${destinationPath}${file} successfully updated!`));
    } else {
      logger.info(chalk.red(`✘ Module ${moduleName} in path ${destinationPath} not found!`));
    }
  }
}

module.exports = updateModule;
